<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
        "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<!-- (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. -->

<!--
  Common bean definitions needed by most applications.
-->
<beans default-autowire="byName" default-lazy-init="false" >

    <!-- 
      This allows properties of beans to be set using a properties file.
      Spring files that include this one can change the name of the file,
      allowing for easier customization of the beans without duplicating
      the entire Spring file.  Commonly used for things like the location
      of the database.
    -->
    <bean id="propertyOverrider" class="sailpoint.server.SpringPropertyOverrider">
        <property name="location" value="iiq.properties"/>
    </bean>


    <!-- ===========================================================
         Bootstrap Configuration
         ============================================================ -->
	
    <!-- data source, properties expected to be in iiq.properties -->

    <!--<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"/>-->

    <!-- DBCP wrapper with connection tracking -->
    <bean id="dataSource" class="sailpoint.persistence.SailPointDataSource" destroy-method="close">
      <!-- this is necessary when using dbcp 1.4 -->
      <property name="accessToUnderlyingConnectionAllowed" value="true"/>
      <property name="defaultAutoCommit" value="true"/>
    </bean>

    <!--
      App-server managed data source that is looked up in JNDI.  The location of
      the data source is configured with jndiName in iiq.properties.
     -->
    <bean id="jndiDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
      <property name="jndiName" value="jdbc/overrideInIIQProperties"/>
      <property name="lookupOnStartup" value="false"/>
      <property name="cache" value="true"/>
      <property name="proxyInterface" value="javax.sql.DataSource"/>
    </bean>

    <!--
      Allows switching between the basic dataSource and jndiDataSource using
      iiq.properties.  Change this by setting configuredDataSource.targetBeanName
      in iiq.properties.  All references to the data source in the spring config
      should use this bean.
     -->
    <bean id="configuredDataSource" class="sailpoint.spring.BeanReferenceFactoryBean">
      <property name="targetBeanName" value="dataSource" />
    </bean>
    
    <!-- plugins data source, properties expected to be in iiq.properties -->
<!--
    <bean id="pluginsDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"/>
-->
    <!-- DBCP wrapper with connection tracking -->
    <bean id="pluginsDataSource" class="sailpoint.persistence.SailPointDataSource" destroy-method="close">
      <!-- this is necessary when using dbcp 1.4 -->
      <property name="accessToUnderlyingConnectionAllowed" value="true"/>
    </bean>

    <!--
      App-server managed plugins data source that is looked up in JNDI.  The location of
      the plugins data source is configured with jndiName in iiq.properties.
     -->
    <bean id="jndiPluginsDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
      <property name="jndiName" value="jdbc/overrideInIIQProperties"/>
      <property name="lookupOnStartup" value="false"/>
      <property name="cache" value="true"/>
      <property name="proxyInterface" value="javax.sql.DataSource"/>
    </bean>

    <!--
      Allows switching between the basic dataSource and jndiDataSource using
      iiq.properties.  Change this by setting configuredPluginsDataSource.targetBeanName
      in iiq.properties.  All references to the data source in the spring config
      should use this bean.
     -->
    <bean id="configuredPluginsDataSource" class="sailpoint.spring.BeanReferenceFactoryBean">
      <property name="targetBeanName" value="pluginsDataSource" />
    </bean>

    <!-- 
      Schema version checker, this must initialize before starting Hibernate.
      Note that the name of this bean must be versionChecker.
      If this bean throws we check for the bean name in the wrapper exception
      Spring throws and reformat the error message so it looks nicer.
    -->
    <bean id="versionChecker" class="sailpoint.server.VersionChecker">
      <property name='dataSource' ref='configuredDataSource'/>
    </bean>


</beans>
